#
# Log events from Icecast access log
#
if [type] == 'syslog' and [program] == 'icecast.access.log' {
  ruby { code => "event['received_at'] = event['@timestamp']" } # save the @timestamp as received_at
  mutate {
    'rename' => [ 'timestamp',  'syslog_timestamp' ] # rename syslog timestamp
  }
  grok {
    'patterns_dir' => 'patterns'
    'add_tag'      => 'icecast_access_match_message'
    'match'        => [ 'message', '%{ICECAST_ACCESS_LOG}' ]
  }
  date {
    'add_tag' => 'access_log_timestamp'
    'match'   => [ 'timestamp', 'dd/MMM/yyyy:HH:mm:ss Z' ] # use icecast timestamp as @timestamp
    'locale'  => 'en'
  }
  # geoip {
  #   'add_tag' => 'geoip'
  #   'source'  => 'clientip'
  # }
}

#
# Log events from Icecast error log
#
if [type] == 'syslog' and [program] == 'icecast.error.log' {
  ruby { code => "event['received_at'] = event['@timestamp']" } # save the @timestamp as received_at
  mutate {
    'rename' => [ 'timestamp',  'syslog_timestamp' ] # rename syslog timestamp
  }
  grok {
    'patterns_dir' => 'patterns'
    'add_tag'      => 'icecast_error_match_message'
    'match'        => [ 'message', '%{ICECAST_ERROR_LOG}' ]
  }
  date {
    'add_tag' => 'icecast_error_timestamp'
    'match'   => [ 'timestamp', 'YYYY-MM-dd  HH:mm:ss' ] # use icecast error timestamp as @timestamp
    'locale'  => 'en'
  }
}

