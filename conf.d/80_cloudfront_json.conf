#
# Transform CloudFront session record (JSON format) to appropriate fields for logging and statistics.
#
# Input JSON
# {
#   "_index": "cloudfront_sessions-20201026",
#   "_type": "_doc",
#   "_id": "24.132.188.152|+|GET|+|/vodcdn/_definst_/mp4:amazons3/media.kerkdienstgemist.nl/90311151-v1520373/20201010085600_15620922-mp4.mp4|+|HTTP/2.0|+|200...",
#   "_score": 1,
#   "_source": {
#     "start_time": "2020-10-26T00:13:53.000+0000",
#     "end_time": "2020-10-26T00:14:16.000+0000",
#     "clientip": "24.132.188.152",
#     "verb": "GET",
#     "request": "/vodcdn/_definst_/mp4:amazons3/media.kerkdienstgemist.nl/90311151-v1520373/20201010085600_15620922-mp4.mp4",
#     "protocol": "HTTP/2.0",
#     "response": "200",
#     "agent": "AppleCoreMedia/1.0.0.16G201 (iPad; U; CPU OS 12_4_8 like Mac OS X; nl_nl)",
#     "referrer": [
#       "https://kerkdienstgemist.nl/stations/1419/events/recording/160232040001419"
#     ],
#     "session_id": "24.132.188.152#GET#/vodcdn/_definst_/mp4:amazons3/media.kerkdienstgemist.nl/90311151-v1520373/20201010085600_15620922-mp4.mp4#HTTP/2.0#200#1603671233000#1603671256000",
#     "bytes": 42048967,
#     "duration": 23,
#     "logsource": [
#       "AMS50-C1"
#     ],
#     "kbps": 14282,
#     "hls": {
#       "playlist": 1,
#       "chunklist": 1,
#       "media": 16
#     },
#     "count": 18
#   }
# }
#
if [type] == 'cloudfront_session' {

  # Copy @timestamp, _id and _index to _source and replace root object with _source.
  # Join logsource, referrer) and agent if they contain arrays.
  ruby {
    code => "
      event['_source']['received_at']  = event['@timestamp']
      event['_source']['kafka_key']    = event['_id']
      event['_source']['source_index'] = event['_index']
      #event['_source']['referrer']     = event['_source']['referrer'].join(';') # join multiple values

      # create timestamp string for Apache Common Log format message
      event['_source']['httpdate'] = Time.parse(event['_source']['end_time']).strftime('%d/%b/%Y:%H:%M:%S %z')

      event.send(:initialize,event['_source'])
      event.remove('_source')
      return [event]
    "
  }

  # parse timestamp and store in @timestamp
  date {
    match   => [ end_time, 'ISO8601' ]
    add_tag => 'cloudfront_timestamp'
  }

  # add program elasticdump
  mutate {
    add_field => {
      program => 'cloudfront.sessions.log'
      message => '%{clientip} - - [%{httpdate}] "%{verb} %{request} %{protocol}" %{response} %{bytes} "%{referrer}" "%{agent}" %{duration} hls=%{[hls][playlist]}/%{[hls][chunklist]}/%{[hls][media]}/%{count}'
    }
    remove_field => [ 'httpdate' ]
  }

  # Add billable tag if request contains a video stream id (account number + stream id)
  if [request] =~ /\/[\d]{8}-v.[\d]+/ {
    noop {
      add_tag => 'billable'
    }
  }

  geoip {
    database => './GeoIP.dat'
    add_tag  => 'geoip'
    source   => 'clientip'
  }

  # match httpversion
  grok {
    # patterns_dir => 'patterns'
    add_tag => 'protocol'
    match   => {
      protocol => 'HTTP/%{NUMBER:httpversion}'
    }
  }

  fingerprint {
    source => 'kafka_key'
    method => 'MD5'
    key    => 'cloudfront_session'
  }
}
