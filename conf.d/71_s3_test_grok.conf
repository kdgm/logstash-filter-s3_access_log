#
# Log events from AWS S3 access logs
#
if [type] == 's3_test_grok' {
  ruby { code => "event['received_at'] = event['@timestamp']" } # save the @timestamp as received_at
  mutate { 'rename' => [ 'message', 's3_message' ] }

  grok {
    'patterns_dir' => 'patterns'
    'match'        => [ 's3_message', '%{S3_ACCESS_LOG}' ]
    'add_tag'      => 's3_access_log'
    'add_field'    => [ 'logsource', 's3' ]
    'add_field'    => [ 'clientip', '%{remote_ip}' ]
    'add_field'    => [ 'response', '%{http_status}' ]
  }
  if 's3_access_log' in [tags] {
    date {
      'add_tag' => 's3_timestamp'
      'match'   => [ 'timestamp', 'dd/MMM/yyyy:HH:mm:ss Z' ] # use s3 access log timestamp as @timestamp
      'locale'  => 'en'
    }

    # Mutate Copy operation into POST request
    if 'REST.COPY.OBJECT_GET' == [operation] {
      mutate {
        'replace'   => [ 'request_uri', 'POST /%{key} HTTP/1.1', 'referrer', '"%{operation}"', 'agent', '"-"', 'duration', '0' ]
        'add_field' => [ 'bytes', '0' ]
      }
    }
    # Shorten requester to 10 chars max
    ruby { code => "event['requester'] && event['requester'] = event['requester'][0..9]" }

    # Compute duration from total_time_ms
    ruby { code => "event['total_time_ms'] && event['duration'] = (event['total_time_ms'].to_f / 1000.0).round" }

    # Re-calculate estimated bytes received by the client (based on 24 kbit/sec bitrate)
    if [response] == '206' {
      ruby {
        code => "event['bytes'] = [ 128 * 1024 + 3 * event['total_time_ms'].to_i, event['bytes'].to_i ].min if ((event['bytes'].to_i*8)/event['total_time_ms'].to_i > 2000)"
        add_tag => 'recalculated'
      }
    }

    # Re-write message as Amazon Combined Log Format
    mutate {
      'add_field' => { 'message' => '%{clientip} - %{requester} [%{timestamp}] "%{request_uri}" %{response} %{bytes} %{referrer} %{agent} %{duration}' }
    }
    # geoip {
    #   'add_tag' => 'geoip'
    #   'source'  => 'clientip'
    # }

    # Add billable tag if request starts with account number
    if [request] =~ /\/[\d]{8}.*/ {
      noop { 'add_tag' => 'billable' }
    }
  }

  # Fingerprint events to prevent creation of duplicate events.
  fingerprint {
    source => 's3_message'
    method => 'MD5'
    key    => '5d8d3ff21f3586c316ebd28ba8f36848'
  }
}
