#
# Log events from legacy icecast servers
# 
if [type] == 'legacy' {
  if [message] =~ /GET\s+\/robots.txt/ { drop {} } # drop robots.txt messages
  ruby { code => "event['logsource'] = File.basename(event['path'], '.log')" }
  ruby { code => "event['received_at'] = event['@timestamp']" } # save the @timestamp as received_at
  mutate {
    'add_field' => [ 'program', 'icecast.access.log' ]
  }
  grok {
    'patterns_dir' => 'patterns'
    'add_tag'      => 'icecast_access_log'
    'match'        => [ 'message', '%{ICECAST_ACCESS_LOG}' ]
  }
  if 'icecast_access_log' in [tags] {
    date {
      'locale'  => 'en'
      'add_tag' => 'access_log_timestamp'
      'match'   => [ 'timestamp', 'dd/MMM/yyyy:HH:mm:ss Z' ]
    }
    # geoip {
    #   'add_tag' => 'geoip'
    #   'source'  => 'clientip'
    # }

    # Add billable tag if request starts with account number
    if [request] =~ /\/[\d]{8}.*/ {
      noop { 'add_tag' => 'billable' }
    }
  }

  # Fingerprint events to prevent creation of duplicate events.
  fingerprint {
    source => [ 'logsource', 'message' ]
    method => 'MD5'
    key    => 'icecast_access_log'
  }
}
