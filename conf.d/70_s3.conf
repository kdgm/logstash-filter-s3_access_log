#
# Log events from AWS S3 access logs
#
if [type] == 's3' {
  ruby { code => "event['received_at'] = event['@timestamp']" } # save the @timestamp as received_at
  mutate { 'rename' => [ 'message', 's3_message' ] }

  s3_access_log {
    source => 's3_message'
    recalculate_partial_content => true
    add_field => [ 'logsource', 's3' ]
    add_field => [ 'clientip', '%{remote_ip}' ]
    add_field => [ 'response', '%{http_status}' ]
  }
  if [logsource] == 's3' {
    # Drop GET requests that end in '-mp4.mp4'.
    if [verb] == 'GET' and [request] =~ /.*-mp4\.mp4$/ {
    # Because they end with '-mp4.mp4' they don't have a valid
    # Signature (and are thus not downloads).
    # These accesses from the VOD server(s) are great in number
    # and not billable and can therefore be dropped.
      drop {}
    }
    date {
      add_tag => 's3_timestamp'
      match   => [ 'timestamp', 'dd/MMM/yyyy:HH:mm:ss Z' ] # use icecast timestamp as @timestamp
      locale  => 'en'
    }
    # geoip {
    #   'add_tag' => 'geoip'
    #   'source'  => 'clientip'
    # }
    if [request] =~ /\/[\d]{8}.*/ {
      noop { add_tag => 'billable' }
    }
  }

  # Fingerprint events to prevent creation of duplicate events.
  fingerprint {
    source => 's3_message'
    method => 'MD5'
    key    => 's3_access_log'
  }
}
